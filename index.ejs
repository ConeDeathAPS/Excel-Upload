<!DOCTYPE html>
<html lang="en" ng-app="angularExcel">
<head>
	<meta charset="UTF-8">
	<title>Angular and Excel</title>
	<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular.min.js"></script>
	<script type="text/javascript" src="xlsx.core.min.js"></script>
	<script type="text/javascript">
	var angularExcel = angular.module("angularExcel", []);

	angularExcel.factory("dataFactory", function ($http) {
		var datum = [];

		var factory = {};

		//retrieve database entries on page load
		factory.getData = function (callback) {
			$http.get("/data")
			.then(function (res) {
				console.log("Got data");
				//if there is stuff in the database, then bring it on through to the front end
				if (res.data[0]) {
					datum.push(res.data[0].data);
					callback(datum);	
					//otherwise, do nothing				
				} else {
					console.log("Database is empty");
				}
			}, function (res) {
				console.log("An error occurred while getting data.");
				console.log(res);
			})
			
		}
		//send a new spreadsheet to the database
		factory.sendContents = function (file) {
			console.log("sending stuff");
			$http.post("/data", file)
			.then(function (res) {
				console.log("Success!", res);
			}, function (res) {
				console.log("error!", res);
			})
		}

		return factory;
	});

	angularExcel.controller("dataController", function ($scope, dataFactory) {
		$scope.datum = [];

		dataFactory.getData(function (data) {
			$scope.datum = data;
			console.log(data);
		})

		//when we receive a new file, use the XLSX reader and parse through to what we want
		$scope.newFile = function () {
			var fileContents = [];			
			var file = document.getElementById('file').files[0];
			var reader = new FileReader();
			reader.onloadend = function (e) {
				var data = e.target.result;
				//this creates the object that contains the parsed workbook contents
				var workbook = XLSX.read(data, {type: 'binary'});
				//grab the first sheet name
				var sheetName = workbook.SheetNames[0];
				//grabs the array of all the entries
				var allContents = workbook.Sheets[sheetName];
				console.log(allContents);
				var wantedContentNames = Object.getOwnPropertyNames(allContents);
				//we dont want the first property name, which is !ref and does nothing for us
				for (i = 1; i < wantedContentNames.length; i++) {
					var lastChar = wantedContentNames[i].charAt(wantedContentNames[i].length-1);
					var prevChar = wantedContentNames[i].charAt(wantedContentNames[i].length-2);
					console.log(lastChar);				
					if (lastChar === "1" && isNaN(parseInt(prevChar))) {
						//grab the string value of the property and push it into this local array
						fileContents.push(allContents[wantedContentNames[i]].w);
						console.log(fileContents);
					}
				}
				//push the array into the complete array of all uploads
				$scope.datum.push(fileContents);
				dataFactory.sendContents(fileContents);
				console.log($scope.datum);
			};
			reader.readAsBinaryString(file);	
		}
	});

	</script>
	<style type="text/css">
	* {
		padding: 0px;
		margin: 0px;
	}
	input {
		display: block;
		margin: 10px 20px;
	}
	</style>
</head>
<body>
	<div ng-controller="dataController">
		<p>Upload XLSX file here:</p>
		<input type="file" id="file" name="file">
		<input type="submit" value="Parse" ng-click="newFile()">		
		<table ng-repeat="spreadsheet in datum">
			<thead>
				<td ng-repeat="content in spreadsheet track by $index">{{content}}</td>
			</thead>
		</table>
	</div>
</body>
</html>